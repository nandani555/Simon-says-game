// 🎮 GAME STATE VARIABLES
let gameseq = [];  // sequence of colours generated by the game
let userseq = [];  // sequence of colours clicked by the user
let start = false; // flag to track if the game has begun
let level = 0;     // current level number

// 🏆 HIGH-SCORE PERSISTENCE
// Retrieve stored high score or initialize to 0 if it doesn't exist
let highScore = parseInt(localStorage.getItem("highScore"), 10) || 0;  // use parseInt since localStorage stores strings :contentReference[oaicite:1]{index=1}

const btns = ["red", "yellow", "green", "blue"]; // valid colour buttons

// Display element for level and high score
const h3 = document.querySelector("h3");

// ▲ START GAME ON KEYPRESS
document.addEventListener("keypress", function() {
  if (!start) {          // only trigger if game hasn't started
    start = true;
    levelup();           // begin level 1
  }
});

// ✔️ CHECK USER INPUT
function checkans(idx) {
  if (userseq[idx] === gameseq[idx]) {
    // If user matched the full sequence so far
    if (userseq.length === gameseq.length) {
      // Proceed to next level after a short pause
      setTimeout(levelup, 1000);
    }
  } else {
    // ❌ Wrong button: game over logic
    if (level > highScore) {
      // Update high score if beaten
      highScore = level;
      localStorage.setItem("highScore", highScore);
    }
    h3.innerHTML = `Game over! Your score was <b>${level}</b>. High Score: <b>${highScore}</b>. Press any key to restart.`;
    // Flash red background
    document.body.style.backgroundColor = "red";
    setTimeout(() => document.body.style.backgroundColor = "white", 150);
    reset(); // reset game to initial state
  }
}

// 🔦 FLASH BUTTON FOR GAME PLAYBACK
function btnflash(btn) {
  btn.classList.add("flash");
  setTimeout(() => btn.classList.remove("flash"), 250);
}

// 🔦 FLASH BUTTON FOR USER CLICK
function userflash(btn) {
  btn.classList.add("userflash");
  setTimeout(() => btn.classList.remove("userflash"), 250);
}

// 🆙 ADVANCE TO NEXT LEVEL
function levelup() {
  userseq = [];               // clear user input
  level++;                    // increase level number
  h3.innerText = `Level ${level} | High Score: ${highScore}`; // display level & best score

  const rand = Math.floor(Math.random() * btns.length); // random index
  const randc = btns[rand];                              // get random colour
  const randbtn = document.querySelector(`.${randc}`);   // button DOM element

  gameseq.push(randc); // append to game sequence
  console.log(gameseq);
  btnflash(randbtn);   // flash it to user
}

// 🎛️ HANDLE USER CLICK EVENTS
function btnpress() {
  userflash(this);                // show visual click effect
  userseq.push(this.id);          // record the clicked colour
  checkans(userseq.length - 1);   // validate the latest click
}

// 🔁 RESET GAME STATE
function reset() {
  start = false;
  gameseq = [];
  userseq = [];
  level = 0;
}

// 🎧 ATTACH CLICK LISTENERS TO ALL COLOUR BUTTONS
document.querySelectorAll(".btn").forEach(btn => {
  btn.removeEventListener("click", btnpress);
  btn.addEventListener("click", btnpress);
});

// 🔰 INITIAL UI MESSAGE
h3.innerText = `Press any key to start. High Score: ${highScore}`;
